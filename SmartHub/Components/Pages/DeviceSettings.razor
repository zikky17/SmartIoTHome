@using SharedResources.Data
@using SharedResources.Models
@using SharedResources.Services
@using SmartHub.ViewModels
@inject DeviceSettingsVM viewModel
@inject IDatabaseContext _databaseContext
@inject DeviceStateService deviceStateService

@page "/device-settings/{deviceId}"

<div class="container">


    <h1 class="settings-headline">SETTINGS</h1>

    @if (Settings != null)
    {
            <hr />
        <div class="settings-list">
            <div>
                <h2>Id:</h2>
                <h6>@Settings.Id</h6>
            </div>
            <div class="flex-item gap-item">
                <h2>Type:</h2>
                <h6>@Settings.Type</h6>
            </div>
            <div class="flex-item gap-item">
                <h2>Location:</h2>
                <h6>@Settings.Location</h6>
            </div>
            <div>
                <h2>Connection String:</h2>
                <h6 class="connection-string-wrap">@Settings.ConnectionString</h6>
            </div>
            <button class="reg-btn mt-3" @onclick=" async () => await viewModel.ActivateDevice(deviceStateService.SelectedDevice!)">Activate Device</button>
        </div>

    }
    else
    {
        <p>Loading settings...</p>
    }

    @if (!string.IsNullOrEmpty(viewModel.ResponseMessage))
    {
        <p class="text-success success-message">@viewModel.ResponseMessage</p>
    }


</div>
@code {
    [Parameter] public string deviceId { get; set; } = null!;
    public SharedResources.Models.DeviceSettings? Settings { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var result = await _databaseContext.GetSettingsAsync(deviceId);
        if (result.Succeeded)
        {
            Settings = result.Content;
        }

    }
}
