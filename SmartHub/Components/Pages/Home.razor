@page "/"
@using Microsoft.Maui.Controls.Platform
@using SmartHub.Converters
@using SmartHub.ViewModels
@using SharedResources.Models
@using System.Globalization
@inject HomeVM viewModel

<div class="container">
    <div class="devices hub-container">
        @if (Devices != null)
        {
            foreach (var device in Devices)
            {
                <div class="container">
                    <div id="@device!.DeviceId" class="device @(device.DeviceState ? "active" : null)">
                        <div class="body device-container">
                            <i class="@GetIconClass(device.DeviceType!) @GetDeviceCssClass(device) 
                                    @(device.DeviceState && device.DeviceType.ToLower() == "fan" ? " spin" : "")"></i>
                            <div class="device-name">@device.DeviceName</div>
                            <div class="state">@(device.ConnectionState ? "Connected" : "Disconnected")</div>
                            <div class="device-state">@(device.DeviceState ? "On" : "Off")</div>
                        </div>
                        <footer>
                            <label class="switch">
                                <InputCheckbox @bind-Value="device.DeviceState"
                                               @onclick="() => viewModel.OnDeviceStateChanged(device)"
                                               disabled="@(device.ConnectionState == false)" />
                                <span class="slider round"></span>
                            </label>
                        </footer>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="preloader">
                <i class="fa-solid fa-spinner-third fa-spin"></i>
            </div>
        }
    </div>
</div>

@code {
    private IEnumerable<SmartDeviceModel> Devices = Array.Empty<SmartDeviceModel>();

    protected override async Task OnInitializedAsync()
    {
        Devices = await viewModel.GetDevicesAsync();
        viewModel.Timer = new Timer(async _ => await SetDevicesAsync(), null, 0, viewModel.TimerInterval);
    }

    private async Task SetDevicesAsync()
    {
        Devices = await viewModel.GetDevicesAsync();
        await InvokeAsync(StateHasChanged);
    }

    private DeviceTypeConverter iconConverter = new DeviceTypeConverter();

    private string GetIconClass(string deviceType)
    {
        return (string)iconConverter.Convert(deviceType!, typeof(string), null, CultureInfo.InvariantCulture);
    }

    private string GetDeviceCssClass(SmartDeviceModel device)
    {
        var cssClass = device.DeviceType.ToLower() switch
        {
            "light" => "icon-light",
            "fan" => "icon-fan",
            "temp" => "icon-temp",
            _ => "icon-default"
        };

        if (device.DeviceState)
        {
            cssClass += device.DeviceType.ToLower() switch
            {
                "fan" => " spin",
                "light" => " pulse",
                _ => ""
            };
        }

        return cssClass;
    }
}
